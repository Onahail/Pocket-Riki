if item_pocket_riki_passive_modifier == nil then 
 	item_pocket_riki_passive_modifier = class({}) 
end 

function item_pocket_riki_passive_modifier:IsHidden()
	return false
end

function item_pocket_riki_passive_modifier:DeclareFunctions() --we want to use these functions in this item 
	local funcs = { 
		MODIFIER_EVENT_ON_ATTACK_LANDED, 
		MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT
	} 

	return funcs 
end 

function item_pocket_riki_passive_modifier:GetModifierConstantHealthRegen()
	if IsServer() then 
		local riki = Entities:FindByName(nil, "npc_dota_hero_riki")
		local ability = self:GetAbility()
		local invis = riki:FindAbilityByName("riki_permanent_invisibility")
		local level = invis:GetLevel()
		
		return ability:GetLevelSpecialValueFor("bonus_health_regen", level)
	end
end
		
function item_pocket_riki_passive_modifier:OnAttackLanded( params )
	local ability = self:GetAbility()
	local riki = Entities:FindByName(nil, "npc_dota_hero_riki")
	local backstab = riki:FindAbilityByName("riki_backstab")
	local level = backstab:GetLevel()
	
	local target_angle = params.target:GetAnglesAsVector().y
	local origin_difference = params.unit:GetAbsOrigin() - params.target:GetAbsOrigin()
	local origin_difference_radian = math.atan2(origin_difference.y, origin_difference.x)
	origin_difference_radian = origin_difference_radian * 180
	local attacker_angle = origin_difference_radian / math.pi
	local result_angle = attacker_angle - victim_angle
	result_angle = math.abs(result_angle)
	
	if result_angle >= (180 - (ability:GetSpecialValueFor("backstab_angle") / 2)) and result_angle <= (180 + (ability:GetSpecialValueFor("backstab_angle") / 2)) then 
		if (params.target:GetHealth() + params.Damage) - (params.Damage + (ability:GetLevelSpecialValueFor("damage_multiplier", level) * params.target:GetPrimaryStatValue())) > 0 then
			params.target:SetHealth((params.target:GetHealth() + params.Damage) - (params.Damage + (ability:GetLevelSpecialValueFor("damage_multiplier", level) * params.target:GetPrimaryStatValue())))
		end
	end
end
